name: Sausage Store Deploy

on:
  push:
    branches:
      - main

env:
  NEXUS_HELM_REPO: ${{ secrets.NEXUS_HELM_REPO }}
  NEXUS_HELM_REPO_USER: ${{ secrets.NEXUS_USER }}
  NEXUS_HELM_REPO_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
  SAUSAGE_STORE_NAMESPACE: r-devops-magistracy-project-2sem-879048678
  KUBE_CONFIG: ${{ secrets.KUBECONFIG }}
  VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}

jobs:
#   deploy:
#     name: Deploy
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout repo
#         uses: actions/checkout@v3
      
#       - name: Copy project to server
#         uses: appleboy/scp-action@master
#         with:
#           host: ${{ secrets.HOST }}
#           username: ${{ secrets.USERSERV }}
#           key: ${{ secrets.SSH_KEY }}
#           source: "."
#           target: "/home/user/sausge-store"

#       - name: Executing remote ssh commands to deploy
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.HOST }}
#           username: ${{ secrets.USERSERV }}
#           key: ${{ secrets.SSH_KEY }}
#           script: |
#             cd /home/user/sausge-store/ 
#             sudo docker-compose -f docker-compose.yml pull
#             sudo docker-compose -f docker-compose.yml down
#             sudo docker-compose -f docker-compose.yml up -d

  # Сборка и пуш образов в докерхаб:
  build_and_push_to_docker_hub:
      name: Push Docker image to DockerHub
      runs-on: ubuntu-latest
      steps:
        - name: Check out the repo
          # Получение исходного кода из репозитория:
          uses: actions/checkout@v3
        - name: Set up Docker Buildx
          # Установка сборщика контейнеров Docker:
          uses: docker/setup-buildx-action@v2
        - name: Login to Docker 
          # Авторизация на Docker Hub:
          uses: docker/login-action@v2
          # При помощи with передаём в action параметры username и password:
          with:
            username: ${{ secrets.DOCKER_USER }}
            password: ${{ secrets.DOCKER_PASSWORD }}
            # Хорошо ли держать логин и пароль прямо в коде workflow?
            # Нет, это нехорошо. Хранить пароль надо в Secrets.
        - name: Push Backend to DockerHub
          # Одновременный билд и пуш образа в Docker Hub:
          uses: docker/build-push-action@v4
          with:
            # Параметр context: ./backend/ указывает, что нужный Dockerfile 
            # находится в ./backend/
            context: ./backend/
            # Параметр push: true указывает, что образ нужно не только собрать,
            # но и отправить на Docker Hub:
            push: true
            # В параметре tags задаётся название и тег для образа.
            # Для каждого пересобранного образа 
            # устанавливаем тег latest, чтобы потом
            # на сервере и в docker-compose.yml не указывать версию образа:
            tags: arturdzh/sausage-backend:latest
            build-args: |
              VERSION=${{ github.sha }}
        - name: Push Frontend to DockerHub
          uses: docker/build-push-action@v4
          with:
            context: ./frontend/
            push: true
            tags: arturdzh/sausage-frontend:latest
        - name: Push Backend-report to DockerHub
          uses: docker/build-push-action@v4
          with:
            context: ./backend-report/
            push: true
            tags: arturdzh/sausage-backend-report:latest
  # Упаковываем helm-чарт и пушим его в Nexus
  add_helm_chart_to_nexus:
      name: Add Helm Chart To Nexus
      runs-on: ubuntu-latest
      needs: build_and_push_to_docker_hub
      steps:
      #### Опишите необходимые шаги
        - name: Check out the repo
          uses: actions/checkout@v3
        - name: Install Helm
          uses: azure/setup-helm@v4
        - name: Install helm-push plugin
          run: |
            helm plugin install https://github.com/chartmuseum/helm-push
        - name: Add Nexus Helm repo
          run: |
            helm repo add nexus ${{ secrets.NEXUS_HELM_REPO }} \
              --username ${{ secrets.NEXUS_HELM_REPO_USER }} \
              --password ${{ secrets.NEXUS_HELM_REPO_PASSWORD }}
        - name: Package Helm chart
          run: |
            helm dependency update ./sausage-store-chart
            helm package ./sausage-store-chart --destination ./packages
        - name: Push Helm chart to Nexus using cm-push
          run: |
            cd ./packages
            helm cm-push --context-path="/repository/${{ secrets.NEXUS_HELM_REPO_NAME }}" *.tgz nexus
        # - name: Push Helm chart to Nexus repository
        #   run: |
        #     CHART_PACKAGE=$(ls ./packages/*.tgz)
        #     curl -v --user "$NEXUS_HELM_REPO_USER:$NEXUS_HELM_REPO_PASSWORD" \
        #       --upload-file "$CHART_PACKAGE" \
        #       "$NEXUS_HELM_REPO/"

  # Деплоим приложения в кластер Kubernetes с помощью helm-чарт
  deploy_helm_chart_to_kubernetes:
      name: Deploy Helm Chart To Kubernetes
      runs-on: ubuntu-latest
      needs: add_helm_chart_to_nexus

      steps:
        - name: Install Helm
          uses: azure/setup-helm@v4

        # Добавляем Helm-репозиторий Nexus
        - name: Add Helm repository (Nexus)
          run: |
            helm repo add nexus $NEXUS_HELM_REPO \
              --username $NEXUS_HELM_REPO_USER \
              --password $NEXUS_HELM_REPO_PASSWORD
            helm repo update

        # Добавляем kubeconfig (секретом)
        - name: Set up kubeconfig
          run: |
            mkdir -p $HOME/.kube
            echo "$KUBE_CONFIG" > $HOME/.kube/config
            cat $HOME/.kube/config

        # Проверим, что можем подключиться
        - name: Test kubectl connection
          run: |
            kubectl get pods,deployments,services -n $SAUSAGE_STORE_NAMESPACE

        - name: Debug helm template output
          run: helm template sausage-store nexus/sausage-store --debug

        # Деплой чарта в Kubernetes
        - name: Deploy Helm chart
          env:
            RELEASE_NAME: sausage-store
            CHART_NAME: nexus/sausage-store
          run: |
            helm upgrade --install $RELEASE_NAME $CHART_NAME \
              --namespace $SAUSAGE_STORE_NAMESPACE
      #### Опишите необходимые шаги