global:
  imagePullPolicy: Always
  vault:
   host: 158.160.98.215
   name: vault
   vaultToken: someToken


frontend:
### В чарте frontend отсутствуют некоторые важные файлы. Поймите какие и опишите их.
  replicas: 1
  revisionHistoryLimit: 15
  strategy:
    type: Recreate
  service:
    port: 80
  ingress:
    host: front-artur.2sem.students-projects.ru # Корректный домен будет указан в задании
    path: /
    pathType: Prefix
  secretName: 2sem-students-projects-wildcard-secret
  containerPort: 80
  image: arturdzh/sausage-frontend:latest
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "128Mi"
      cpu: "200m"
  nginxConf: nginx.conf

backend:
  annotations:
    path: /actuator/prometheus
    port: "8080"
    scrape: "true"
  env:
    postgresUri: jdbc:postgresql://postgres:5432/sausage-store
    postgresUser: store
    postgresPassword: storepassword
    reportPath: /logs/reports
    logPath: /logs
  service:
    port: 8080
  revisionHistoryLimit: 15
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  ### Опишите стратегию RollingUpdate для бэкенда
  image: arturdzh/sausage-backend:latest
  imagePullPolicy: Always
  resources:
    requests:
      memory: "256Mi"
      cpu: "500m"
    limits:
      memory: "512Mi"
      cpu: "900m"
  containerPort: 8080
  livenessProbe:
    httpGet:
      path: /actuator/health
      port: 8080
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 3
    failureThreshold: 3
  ### Опишите LivenessProbe для бэкенда
  vpa:
    updatePolicy:
      updateMode: "Auto"
    resourcePolicy:
      containerPolicies:
        - containerName: "*"
          minAllowed:
            cpu: "300m"
            memory: "180Mi"
          maxAllowed:
            cpu: "900m"
            memory: "800Mi"
  ### Опишите VPA для бэкенда

backend-report:
  env:
    port: "8080"
  revisionHistoryLimit: "15"
  replicas: "1"
  image: arturdzh/sausage-backend-report:latest
  containerPort: 8080
  resources:
    requests:
      memory: "128Mi"
      cpu: "150m"
    limits:
      memory: "256Mi"
      cpu: "300m"
  service:
    containerPort: 8080
  livenessProbe:
    httpGet:
      path: /api/v1/health
      port: 8080
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 3
    failureThreshold: 3
  hpa:
    enabled: true
    minReplicas: "1"
    maxReplicas: "5"
    targetCPUUtilizationPercentage: "70"
  secret:
    DB: "mongodb://reports:reportspassword@mongodb:27017/sausage-store"
### Опишите значения для backend-report
### Приложение должно использовать стратегию Recreate
### Приложение использует переменную PORT - порт, на котором оно запустится и DB - Uri-подключение к mongodb. 
### DB положите в Secret, PORT в ConfigMap
### Опишите HPA для backend-report

infra:
  postgresql:
    containerPort: "5432"
    env:
      POSTGRES_USER: store
      POSTGRES_PASSWORD: storepassword
      POSTGRES_DB: sausage-store
    resources:
      requests:
        memory: "256Mi"
        cpu: "300m"
      limits:
        memory: "512Mi"
        cpu: "500m"
  ### Опишите необходимые переменные для развертывания PostgresQL в кластере Kubernetes
  mongodb:
    env:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: rootpassword
      host: mongodb       # имя сервиса MongoDB в кластере
      port: "27017"
      database: reports
    containerPort: "27017"
    resources:
      requests:
        memory: "128Mi"
        cpu: "50m"
      limits:
        memory: "256Mi"
        cpu: "200m"    
